import java.io.File

import com.typesafe.sbt.packager.universal.ZipHelper
import ohnosequences.sbt.SbtGithubReleasePlugin
import sbt.Keys._
import sbt.io.Path
import sbt.{AutoPlugin, Def, Plugins, Setting, Task, taskKey, _}

object GithubReleaseWithCoursier extends AutoPlugin {

  val cswRelease = taskKey[File]("Create zip of all the artifacts generated by coursier bootstrap.")

  override def requires: Plugins = SbtGithubReleasePlugin

  override def projectSettings: Seq[Setting[_]] = Seq(
    cswRelease := zipCoursierArtifacts.value
  )

  private def zipCoursierArtifacts: Def.Initialize[Task[File]] = Def.task {
    val zipFileName  = s"csw-apps-${version.value}"
    lazy val appsZip = new File(target.value / "ghrelease", s"$zipFileName.zip")

    val tuples = Path.allSubpaths(target.value / "coursier/stage")
    val mapping = tuples
      .map {
        case (source, dest) â‡’ (source, s"$zipFileName/$dest")
      }

    ZipHelper.zipNative(mapping, appsZip)
    appsZip
  }

}
