package csw.event.client.pb

/**
 * This trait will be mixed in with classes(e.g. StringItems, BooleanItems...etc) generated by ScalaPB.
 */
trait ItemType[T] {

  /**
   * Provides a Seq of values this ItemType holds
   */
  def values: Array[T]

  /**
   * Create an ItemType with provided values
   *
   * @param values one or more values
   * @return a generic Any type
   */
  def withValues(values: Array[T]): Any

  /**
   * Create an ItemType with provided values
   *
   * @param values one or more values
   * @return an instance of ItemType
   */
  def set(values: Array[T]): this.type = withValues(values).asInstanceOf[this.type]

  override def equals(obj: Any): Boolean = obj match {
    case x: ItemType[_] => underlying == x.underlying
    case _              => false
  }

  override def hashCode(): Int = underlying.hashCode()

  private def underlying = values.toList
}

/**
 * This trait will be mixed in with companion object of classes generated by ScalaPB.
 */
trait ItemTypeCompanion[S] {

  /**
   * Represents a default instance of the ItemType
   */
  def defaultInstance: S
}

object ItemTypeCompanion {
  def apply[T](implicit x: ItemTypeCompanion[T]): ItemTypeCompanion[T] = x
  def make[T, S <: ItemType[T]: ItemTypeCompanion](items: Array[T]): S = {
    ItemTypeCompanion[S].defaultInstance.set(items)
  }
}
