// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef PROTOBUF_INCLUDED_events_2eproto
#define PROTOBUF_INCLUDED_events_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "parameter.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_events_2eproto 

namespace protobuf_events_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_events_2eproto
namespace csw_protobuf {
class PbEvent;
class PbEventDefaultTypeInternal;
extern PbEventDefaultTypeInternal _PbEvent_default_instance_;
}  // namespace csw_protobuf
namespace google {
namespace protobuf {
template<> ::csw_protobuf::PbEvent* Arena::CreateMaybeMessage<::csw_protobuf::PbEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace csw_protobuf {

enum PbEvent_PbEventType {
  PbEvent_PbEventType_ObserveEvent = 0,
  PbEvent_PbEventType_SystemEvent = 1,
  PbEvent_PbEventType_PbEvent_PbEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PbEvent_PbEventType_PbEvent_PbEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PbEvent_PbEventType_IsValid(int value);
const PbEvent_PbEventType PbEvent_PbEventType_PbEventType_MIN = PbEvent_PbEventType_ObserveEvent;
const PbEvent_PbEventType PbEvent_PbEventType_PbEventType_MAX = PbEvent_PbEventType_SystemEvent;
const int PbEvent_PbEventType_PbEventType_ARRAYSIZE = PbEvent_PbEventType_PbEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbEvent_PbEventType_descriptor();
inline const ::std::string& PbEvent_PbEventType_Name(PbEvent_PbEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbEvent_PbEventType_descriptor(), value);
}
inline bool PbEvent_PbEventType_Parse(
    const ::std::string& name, PbEvent_PbEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbEvent_PbEventType>(
    PbEvent_PbEventType_descriptor(), name, value);
}
// ===================================================================

class PbEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csw_protobuf.PbEvent) */ {
 public:
  PbEvent();
  virtual ~PbEvent();

  PbEvent(const PbEvent& from);

  inline PbEvent& operator=(const PbEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbEvent(PbEvent&& from) noexcept
    : PbEvent() {
    *this = ::std::move(from);
  }

  inline PbEvent& operator=(PbEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbEvent* internal_default_instance() {
    return reinterpret_cast<const PbEvent*>(
               &_PbEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PbEvent* other);
  friend void swap(PbEvent& a, PbEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbEvent* New() const final {
    return CreateMaybeMessage<PbEvent>(NULL);
  }

  PbEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PbEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PbEvent& from);
  void MergeFrom(const PbEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PbEvent_PbEventType PbEventType;
  static const PbEventType ObserveEvent =
    PbEvent_PbEventType_ObserveEvent;
  static const PbEventType SystemEvent =
    PbEvent_PbEventType_SystemEvent;
  static inline bool PbEventType_IsValid(int value) {
    return PbEvent_PbEventType_IsValid(value);
  }
  static const PbEventType PbEventType_MIN =
    PbEvent_PbEventType_PbEventType_MIN;
  static const PbEventType PbEventType_MAX =
    PbEvent_PbEventType_PbEventType_MAX;
  static const int PbEventType_ARRAYSIZE =
    PbEvent_PbEventType_PbEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PbEventType_descriptor() {
    return PbEvent_PbEventType_descriptor();
  }
  static inline const ::std::string& PbEventType_Name(PbEventType value) {
    return PbEvent_PbEventType_Name(value);
  }
  static inline bool PbEventType_Parse(const ::std::string& name,
      PbEventType* value) {
    return PbEvent_PbEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .csw_protobuf.PbParameter paramSet = 14;
  int paramset_size() const;
  void clear_paramset();
  static const int kParamSetFieldNumber = 14;
  ::csw_protobuf::PbParameter* mutable_paramset(int index);
  ::google::protobuf::RepeatedPtrField< ::csw_protobuf::PbParameter >*
      mutable_paramset();
  const ::csw_protobuf::PbParameter& paramset(int index) const;
  ::csw_protobuf::PbParameter* add_paramset();
  const ::google::protobuf::RepeatedPtrField< ::csw_protobuf::PbParameter >&
      paramset() const;

  // string eventId = 10;
  void clear_eventid();
  static const int kEventIdFieldNumber = 10;
  const ::std::string& eventid() const;
  void set_eventid(const ::std::string& value);
  #if LANG_CXX11
  void set_eventid(::std::string&& value);
  #endif
  void set_eventid(const char* value);
  void set_eventid(const char* value, size_t size);
  ::std::string* mutable_eventid();
  ::std::string* release_eventid();
  void set_allocated_eventid(::std::string* eventid);

  // string source = 11;
  void clear_source();
  static const int kSourceFieldNumber = 11;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string name = 12;
  void clear_name();
  static const int kNameFieldNumber = 12;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp eventTime = 13;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 13;
  private:
  const ::google::protobuf::Timestamp& _internal_eventtime() const;
  public:
  const ::google::protobuf::Timestamp& eventtime() const;
  ::google::protobuf::Timestamp* release_eventtime();
  ::google::protobuf::Timestamp* mutable_eventtime();
  void set_allocated_eventtime(::google::protobuf::Timestamp* eventtime);

  // .csw_protobuf.PbEvent.PbEventType eventType = 15;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 15;
  ::csw_protobuf::PbEvent_PbEventType eventtype() const;
  void set_eventtype(::csw_protobuf::PbEvent_PbEventType value);

  // @@protoc_insertion_point(class_scope:csw_protobuf.PbEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::csw_protobuf::PbParameter > paramset_;
  ::google::protobuf::internal::ArenaStringPtr eventid_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* eventtime_;
  int eventtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_events_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbEvent

// string eventId = 10;
inline void PbEvent::clear_eventid() {
  eventid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbEvent::eventid() const {
  // @@protoc_insertion_point(field_get:csw_protobuf.PbEvent.eventId)
  return eventid_.GetNoArena();
}
inline void PbEvent::set_eventid(const ::std::string& value) {
  
  eventid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csw_protobuf.PbEvent.eventId)
}
#if LANG_CXX11
inline void PbEvent::set_eventid(::std::string&& value) {
  
  eventid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csw_protobuf.PbEvent.eventId)
}
#endif
inline void PbEvent::set_eventid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eventid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csw_protobuf.PbEvent.eventId)
}
inline void PbEvent::set_eventid(const char* value, size_t size) {
  
  eventid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csw_protobuf.PbEvent.eventId)
}
inline ::std::string* PbEvent::mutable_eventid() {
  
  // @@protoc_insertion_point(field_mutable:csw_protobuf.PbEvent.eventId)
  return eventid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbEvent::release_eventid() {
  // @@protoc_insertion_point(field_release:csw_protobuf.PbEvent.eventId)
  
  return eventid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbEvent::set_allocated_eventid(::std::string* eventid) {
  if (eventid != NULL) {
    
  } else {
    
  }
  eventid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventid);
  // @@protoc_insertion_point(field_set_allocated:csw_protobuf.PbEvent.eventId)
}

// string source = 11;
inline void PbEvent::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbEvent::source() const {
  // @@protoc_insertion_point(field_get:csw_protobuf.PbEvent.source)
  return source_.GetNoArena();
}
inline void PbEvent::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csw_protobuf.PbEvent.source)
}
#if LANG_CXX11
inline void PbEvent::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csw_protobuf.PbEvent.source)
}
#endif
inline void PbEvent::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csw_protobuf.PbEvent.source)
}
inline void PbEvent::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csw_protobuf.PbEvent.source)
}
inline ::std::string* PbEvent::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:csw_protobuf.PbEvent.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbEvent::release_source() {
  // @@protoc_insertion_point(field_release:csw_protobuf.PbEvent.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbEvent::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:csw_protobuf.PbEvent.source)
}

// string name = 12;
inline void PbEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbEvent::name() const {
  // @@protoc_insertion_point(field_get:csw_protobuf.PbEvent.name)
  return name_.GetNoArena();
}
inline void PbEvent::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csw_protobuf.PbEvent.name)
}
#if LANG_CXX11
inline void PbEvent::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csw_protobuf.PbEvent.name)
}
#endif
inline void PbEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csw_protobuf.PbEvent.name)
}
inline void PbEvent::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csw_protobuf.PbEvent.name)
}
inline ::std::string* PbEvent::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:csw_protobuf.PbEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbEvent::release_name() {
  // @@protoc_insertion_point(field_release:csw_protobuf.PbEvent.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbEvent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:csw_protobuf.PbEvent.name)
}

// .google.protobuf.Timestamp eventTime = 13;
inline bool PbEvent::has_eventtime() const {
  return this != internal_default_instance() && eventtime_ != NULL;
}
inline const ::google::protobuf::Timestamp& PbEvent::_internal_eventtime() const {
  return *eventtime_;
}
inline const ::google::protobuf::Timestamp& PbEvent::eventtime() const {
  const ::google::protobuf::Timestamp* p = eventtime_;
  // @@protoc_insertion_point(field_get:csw_protobuf.PbEvent.eventTime)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PbEvent::release_eventtime() {
  // @@protoc_insertion_point(field_release:csw_protobuf.PbEvent.eventTime)
  
  ::google::protobuf::Timestamp* temp = eventtime_;
  eventtime_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PbEvent::mutable_eventtime() {
  
  if (eventtime_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    eventtime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:csw_protobuf.PbEvent.eventTime)
  return eventtime_;
}
inline void PbEvent::set_allocated_eventtime(::google::protobuf::Timestamp* eventtime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventtime_);
  }
  if (eventtime) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(eventtime)->GetArena();
    if (message_arena != submessage_arena) {
      eventtime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventtime, submessage_arena);
    }
    
  } else {
    
  }
  eventtime_ = eventtime;
  // @@protoc_insertion_point(field_set_allocated:csw_protobuf.PbEvent.eventTime)
}

// repeated .csw_protobuf.PbParameter paramSet = 14;
inline int PbEvent::paramset_size() const {
  return paramset_.size();
}
inline ::csw_protobuf::PbParameter* PbEvent::mutable_paramset(int index) {
  // @@protoc_insertion_point(field_mutable:csw_protobuf.PbEvent.paramSet)
  return paramset_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::csw_protobuf::PbParameter >*
PbEvent::mutable_paramset() {
  // @@protoc_insertion_point(field_mutable_list:csw_protobuf.PbEvent.paramSet)
  return &paramset_;
}
inline const ::csw_protobuf::PbParameter& PbEvent::paramset(int index) const {
  // @@protoc_insertion_point(field_get:csw_protobuf.PbEvent.paramSet)
  return paramset_.Get(index);
}
inline ::csw_protobuf::PbParameter* PbEvent::add_paramset() {
  // @@protoc_insertion_point(field_add:csw_protobuf.PbEvent.paramSet)
  return paramset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::csw_protobuf::PbParameter >&
PbEvent::paramset() const {
  // @@protoc_insertion_point(field_list:csw_protobuf.PbEvent.paramSet)
  return paramset_;
}

// .csw_protobuf.PbEvent.PbEventType eventType = 15;
inline void PbEvent::clear_eventtype() {
  eventtype_ = 0;
}
inline ::csw_protobuf::PbEvent_PbEventType PbEvent::eventtype() const {
  // @@protoc_insertion_point(field_get:csw_protobuf.PbEvent.eventType)
  return static_cast< ::csw_protobuf::PbEvent_PbEventType >(eventtype_);
}
inline void PbEvent::set_eventtype(::csw_protobuf::PbEvent_PbEventType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:csw_protobuf.PbEvent.eventType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace csw_protobuf

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::csw_protobuf::PbEvent_PbEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::csw_protobuf::PbEvent_PbEventType>() {
  return ::csw_protobuf::PbEvent_PbEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_events_2eproto
